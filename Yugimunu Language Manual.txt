# 유기문어(有機文語) 인터프리터

유기문어는 웹소설 『유기무녀』의 설정을 기반으로 제작된 튜링 완전한 프로그래밍 언어입니다.

해당 언어는 [여기서](https://shachixu.github.io/yugimunu/) 테스트 가능하며 원작 웹소설은 [여기서](https://novelpia.com/novel/21232) 읽을 수 있습니다.

아직 버그가 많으며 현재 수정 중입니다.

## 문법

### 변수
* 사전에 정의된 인물 이름이 변수로 사용됩니다: `경민`, `한별`, `솔빈`, `츠카사`, `윤설`.
* 각 변수는 `value`와 `status`(`"자유"`, `"생존"`, `"사망"`)를 가집니다.
* `경민`은 항상 `"자유"` 상태이며 모든 연산에 참여할 수 있습니다.
* `한별`, `솔빈`, `츠카사`, `윤설`은 초기 `status`가 정해져 있으며, 특정 연산은 `status`에 따라 제한될 수 있습니다.

### 할당 및 입출력

* **변수 할당**: `[주어]이/가 [목적어/값]을/를 이해했다`
    * 예시: `경민이 10을 이해했다` (경민 = 10)
    * 예시: `솔빈이 한별을 이해했다` (솔빈 = 한별의 값)
    * 예시: `츠카사가 "안녕"을 이해했다` (츠카사 = "안녕")
* **값 입력**: `경민이 [변수명]을/를 들었다`
    * 예시: `경민이 경민을 들었다` (경민 변수에 사용자 입력 값을 할당)
* **값 출력**: `경민이 [변수명/문자열]을/를 말했다`
    * 예시: `경민이 경민을 말했다` (경민 변수의 값을 출력)
    * 예시: `경민이 "Hello, world!"를 말했다` (문자열 리터럴 "Hello, world!"를 출력)

### 연산자 (사망/생존 상태에 따른 제약)

* **덧셈 (사랑)**: `[주어]이/가 [목적어]을/를 사랑했다`
    * 목적어 변수의 값을 1 증가시킵니다.
    * `경민`은 자신을 사랑할 수 있습니다: `경민이 경민을 사랑했다` (경민의 값 1 증가).
    * 주어와 목적어 모두 "생존" 또는 "자유" 상태여야 합니다.
* **뺄셈 (증오)**: `[주어]이/가 [목적어]을/를 증오했다`
    * 목적어 변수의 값을 1 감소시킵니다.
    * 주어와 목적어 모두 "사망" 또는 "자유" 상태여야 합니다.
* **곱셈 (껴안음)**: `[주어]이/가 [목적어]을/를 껴안았다`
    * 목적어 변수의 값을 2배로 만듭니다.
    * 주어와 목적어 모두 "생존" 또는 "자유" 상태여야 합니다.
* **나눗셈 (밀어냄)**: `[주어]이/가 [목적어]을/를 밀어냈다`
    * 목적어 변수의 값을 2로 나누고 소수점 이하는 버립니다 (정수 나눗셈).
    * 주어와 목적어 모두 "사망" 또는 "자유" 상태여야 합니다.
* **초기화 (잊음)**: `[주어]이/가 [목적어]을/를 잊었다` 또는 `[주어]이/가 잊었다`
    * 목적어 변수의 값을 0으로 초기화합니다.
    * `[주어]이/가 잊었다`의 경우 주어 자신의 값을 0으로 초기화합니다.
    * 적대 관계에서도 허용됩니다.

### 조건문

* **If 시작**: `[주어]이/가 [조건]고 생각했다` 또는 `[주어]이/가 [값]을/를 이해했다고 생각했다`
    * 예시: `경민이 10보다 크다고 생각했다`
    * 예시: `윤설이 츠카사를 이해했다고 생각했다` (윤설의 값과 츠카사의 값이 같은지 비교)
    * 예시: `한별이 솔빈을 이해하지 못했다고 생각했다` (한별의 값과 솔빈의 값이 다른지 비교)
    * **조건 표현**:
        * `[값] 보다 크다`
        * `[값] 보다 작다`
        * `[값] 이상이다` (또는 `[값] 이상`)
        * `[값] 이하이다` (또는 `[값] 이하`)
        * `[값]을/를 이해했다` (같다 `==`)
        * `[값]을/를 이해하지 못했다` (같지 않다 `!=`)
        * 단순 값 비교 (예: `경민이 5고 생각했다`는 `경민의 값 == 5`와 동일)
    * **복합 조건**:
        * `[조건1] 또한 [조건2]` (AND 연산)
        * `[조건1] 또는 [조건2]` (OR 연산)
* **Else**: `경민은 생각을 바꿨다`
* **If/Else 끝**: `경민은 생각을 그만뒀다`

### 반복문

* **Loop 시작**: `경민은 루프를 시작했다`
* **Loop 종료**: `경민은 루프를 종료했다` (Loop 시작 지점으로 돌아가 반복)
* **Continue**: `경민은 루프를 건너뛰었다` (현재 루프의 다음 반복으로 넘어감)
* **Break**: `경민은 루프를 깨뜨렸다` (현재 루프를 완전히 종료하고 루프 다음 코드로 이동)

### 주석

* `#` 문자를 사용하여 한 줄 주석을 작성할 수 있습니다. `#` 뒤의 내용은 무시됩니다.
    * 예시: `경민이 경민을 사랑했다 # 경민의 값을 1 증가`

### 적대 관계 및 연산 제한

* 다음 인물들은 적대 관계입니다:
    * `한별` ↔ `솔빈`
    * `츠카사` ↔ `윤설`
* 적대 관계에 있는 인물들은 서로에게 `사랑했다`, `증오했다`, `껴안았다`, `밀어냈다` 연산을 수행할 수 없습니다.
* `잊었다` 연산은 적대 관계에서도 허용됩니다.
